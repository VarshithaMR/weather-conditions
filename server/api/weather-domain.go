package api

import (
	log "github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	"net"

	pb "weather-conditions/proto/generated"
)

const (
	endPoint = "/location-weather"
)

type Serve struct {
	pb.WeatherConditionServiceServer
}

func ConfigureApi(contextRoot string, port string) {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("Failed to listen on: %v", err)
		return
	}

	s := grpc.NewServer()
	pb.RegisterWeatherConditionServiceServer(s, &Serve{}) // register our server generated by proto

	if err = s.Serve(lis); err != nil {
		log.Fatalf("Failure to start Go http server: %v", err)
		return
	}
}

/*func HandleWeather(rw http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		ns.StartNtg(rw, r)
	}
}*/
