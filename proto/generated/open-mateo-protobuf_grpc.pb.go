// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/open-mateo-protobuf.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenMateoService_GetWeatherForecast_FullMethodName = "/openmateo.OpenMateoService/GetWeatherForecast"
)

// OpenMateoServiceClient is the client API for OpenMateoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenMateoServiceClient interface {
	GetWeatherForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error)
}

type openMateoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenMateoServiceClient(cc grpc.ClientConnInterface) OpenMateoServiceClient {
	return &openMateoServiceClient{cc}
}

func (c *openMateoServiceClient) GetWeatherForecast(ctx context.Context, in *ForecastRequest, opts ...grpc.CallOption) (*ForecastResponse, error) {
	out := new(ForecastResponse)
	err := c.cc.Invoke(ctx, OpenMateoService_GetWeatherForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenMateoServiceServer is the server API for OpenMateoService service.
// All implementations must embed UnimplementedOpenMateoServiceServer
// for forward compatibility
type OpenMateoServiceServer interface {
	GetWeatherForecast(context.Context, *ForecastRequest) (*ForecastResponse, error)
	mustEmbedUnimplementedOpenMateoServiceServer()
}

// UnimplementedOpenMateoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpenMateoServiceServer struct {
}

func (UnimplementedOpenMateoServiceServer) GetWeatherForecast(context.Context, *ForecastRequest) (*ForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherForecast not implemented")
}
func (UnimplementedOpenMateoServiceServer) mustEmbedUnimplementedOpenMateoServiceServer() {}

// UnsafeOpenMateoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenMateoServiceServer will
// result in compilation errors.
type UnsafeOpenMateoServiceServer interface {
	mustEmbedUnimplementedOpenMateoServiceServer()
}

func RegisterOpenMateoServiceServer(s grpc.ServiceRegistrar, srv OpenMateoServiceServer) {
	s.RegisterService(&OpenMateoService_ServiceDesc, srv)
}

func _OpenMateoService_GetWeatherForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenMateoServiceServer).GetWeatherForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenMateoService_GetWeatherForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenMateoServiceServer).GetWeatherForecast(ctx, req.(*ForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenMateoService_ServiceDesc is the grpc.ServiceDesc for OpenMateoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenMateoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openmateo.OpenMateoService",
	HandlerType: (*OpenMateoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeatherForecast",
			Handler:    _OpenMateoService_GetWeatherForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/open-mateo-protobuf.proto",
}
